#ifdef HAVE_PAGLIB
// general c++ library for manipulating streams
#include <iostream>
#include <sstream>

#include "gmp.h"
#include "mpfr.h"

#include "FullyParallelFFT.hpp"

using namespace std;
namespace flopoco {




FullyParallelFFT::FullyParallelFFT(Target* target, int wIn_, string rotator_file_name_, string FFT_realization_file_name_)
    : Operator(target),
      wIn(wIn_),
      rotator_file_name(rotator_file_name_),
      FFT_realization_file_name(FFT_realization_file_name_)
{

		srcFileName="FullyParallelFFT";
		ostringstream name;
        name << "FullyParallelFFT_" << wIn << "_" << rotator_file_name <<"_"<< FFT_realization_file_name;
        cerr << name.str();
		setName(name.str());
		// Copyright 
        setCopyrightString("Konrad MÃ¶ller, Martin Kumm, Mario Garrido");

		/* SET UP THE IO SIGNALS
		   Each IO signal is declared by addInput(name,n) or addOutput(name,n) 
		   where name is a string that stands for the name of the variable and 
		   n is an integer (int)   that stands for the length of the corresponding 
		   input/output */

		// declaring inputs
        addInput ("X" , wIn);
        addInput ("Y" , wIn);
        addInput ("Z" , wIn);
		addFullComment(" addFullComment for a large comment ");
		addComment("addComment for small left-aligned comment");

		// declaring output
        addOutput("S" , wIn);

		// basic message
		REPORT(INFO,"Declaration of FullyParallelFFT \n");
		// more detailed message
        REPORT(DETAILED, "this operator has received three parameters " << wIn << ", " << rotator_file_name << " and " << FFT_realization_file_name)
		// debug message for developper
		REPORT(DEBUG,"debug of FullyParallelFFT");

        vhdl << tab << declare("T", wIn+1) << " <= ('0' & X) + ('0' & Y);" << endl;


        vhdl << tab << declare("R",wIn+2) << " <=  ('0' & T) + (\"00\" & Z);" << endl;

		// we first put the most significant bit of the result into R
        vhdl << tab << "S <= (R" << of(wIn +1) << " & ";
		// and then we place the last param1 bits
        vhdl << "R" << range(wIn +1 ,0) << ");" << endl;
	};

	
	void FullyParallelFFT::emulate(TestCase * tc) {
		/* This function will be used when the TestBench command is used in the command line
		   we have to provide a complete and correct emulation of the operator, in order to compare correct output generated by this function with the test input generated by the vhdl code */
	}


	void FullyParallelFFT::buildStandardTestCases(TestCaseList * tcl) {
		// please fill me with regression tests or corner case tests!
	}


	OperatorPtr FullyParallelFFT::parseArguments(Target *target, vector<string> &args) {
        int wIn;
        string rotator_file_name, FFT_realization_file_name;
        UserInterface::parseInt(args, "wIn", &wIn); // param0 has a default value, this method will recover it if it doesnt't find it in args,
        UserInterface::parseString(args, "rotator_file_name", &rotator_file_name);
        UserInterface::parseString(args, "FFT_realization_file_name", &FFT_realization_file_name);
        return new FullyParallelFFT(target, wIn, rotator_file_name, FFT_realization_file_name);
	}
	
	void FullyParallelFFT::registerFactory(){
		UserInterface::add("FullyParallelFFT", // name
                                             "Generator for a fully parallel multiplier-less FFT implementation using shift and add", // description, string
                                             "Filters and FFTs", // category, from the list defined in UserInterface.cpp
											 "", //seeAlso
											 // Now comes the parameter description string.
											 // Respect its syntax because it will be used to generate the parser and the docs
											 // Syntax is: a semicolon-separated list of parameterDescription;
											 // where parameterDescription is parameterName (parameterType)[=defaultValue]: parameterDescriptionString 
                                             "wIn(int)=16: A first parameter, here used as the input size; \
                           rotator_file_name(string): A second parameter, here used as the output size; \
                           FFT_realization_file_name(string): A third parameter, here used as the output size",
											 // More documentation for the HTML pages. If you want to link to your blog, it is here.
											 "Feel free to experiment with its code, it will not break anything in FloPoCo. <br> Also see the developper manual in the doc/ directory of FloPoCo.",
											 FullyParallelFFT::parseArguments
											 ) ;
	}

}//namespace
#endif // HAVE_PAGLIB
